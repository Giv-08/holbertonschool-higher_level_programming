from 2-matrix_divided import matrix_divided

The ``matrix_divided`` module

Using ``matrix_divided``

First, import ``matrix_divided`` from the ``2-matrix_divided`` file:

    >>> matrix = __import__('2-matrix_divided').matrix_divided

Examples:
---------
Add list of integer and integer as div:

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Add a list of integer and integer as div:

    >>> matrix_divided(matrix, 3.3)
    [[0.3, 0.61, 0.91], [1.21, 1.52, 1.82]]

Add a list of interger with no div:

    >>> matrix_divided(matrix)
    [[1, 2, 3], [4, 5, 6]]

Handle infinity:

    >>> matrix_divided(matrix, float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

    >>> matrix_divided(matrix, float('-inf'))
    [[-0.0, -0.0, -0.0], [-0.0, -0.0, -0.0]]

Handle NaN:

    >>> matrix_divided(matrix, float('NaN'))
    [[nan, nan, nan], [nan, nan, nan]]

Handle negative number:

    >>> matrix_divided(matrix, -8)
    [[-0.12, -0.25, -0.38], [-0.5, -0.62, -0.75]]

Miss required arguments:

    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Add 0 as div:

    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Add string as div:

    >>> matrix_divided(matrix, "3")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Add only on argument:

    >>> matrix_divided("3")
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    >>> matrix_divided(3)
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'
